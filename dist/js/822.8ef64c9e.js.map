{"version":3,"file":"js/822.8ef64c9e.js","mappings":"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","sources":["webpack://snippets-admin/./src/views/count-up/index.vue","webpack://snippets-admin/./node_modules/countup.js/dist/countUp.min.js","webpack://snippets-admin/src/views/count-up/index.vue","webpack://snippets-admin/./src/views/count-up/index.vue?2bf9","webpack://snippets-admin/./src/views/count-up/index.vue?cd65"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"page\"},[_c('h4',[_vm._v(\"CountUp.js\")]),_vm._m(0),_c('div',{staticClass:\"demo\"},[_c('h1',{ref:\"target\"}),_c('button',{staticClass:\"btn btn-primary\",attrs:{\"type\":\"button\"},on:{\"click\":_vm.clickStart}},[_vm._v(\"Start\")])]),_vm._m(1)])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"blockquote\"},[_vm._v(\" CountUp.js is a dependency-free, lightweight JavaScript class that can be used to quickly create animations that display numerical data in a more interesting way. \"),_c('a',{attrs:{\"href\":\"https://github.com/inorganik/CountUp.js\",\"target\":\"_blank\"}},[_vm._v(\"https://github.com/inorganik/CountUp.js\")])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"source mt-3\"},[_c('pre',[_vm._v(\"import { CountUp } from 'countup.js'\\n====================================\\nexport interface CountUpOptions { // (default)\\n  startVal?: number; // number to start at (0)\\n  decimalPlaces?: number; // number of decimal places (0)\\n  duration?: number; // animation duration in seconds (2)\\n  useGrouping?: boolean; // example: 1,000 vs 1000 (true)\\n  useIndianSeparators?: boolean; // example: 1,00,000 vs 100,000 (false)\\n  useEasing?: boolean; // ease animation (true)\\n  smartEasingThreshold?: number; // smooth easing for large numbers above this if useEasing (999)\\n  smartEasingAmount?: number; // amount to be eased for numbers above threshold (333)\\n  separator?: string; // grouping separator (,)\\n  decimal?: string; // decimal (.)\\n  // easingFn: easing function for animation (easeOutExpo)\\n  easingFn?: (t: number, b: number, c: number, d: number) => number;\\n  formattingFn?: (n: number) => string; // this function formats result\\n  prefix?: string; // text prepended to result\\n  suffix?: string; // text appended to result\\n  numerals?: string[]; // numeral glyph substitution\\n  enableScrollSpy?: boolean; // start animation when target is in view\\n  scrollSpyDelay?: number; // delay (ms) after target comes into view\\n  scrollSpyOnce?: boolean; // run only once\\n  onCompleteCallback?: () => any; // gets called when animation completes\\n  plugin?: CountUpPlugin; // for alternate animations\\n}\\n\\nexport declare interface CountUpPlugin {\\n  render(elem: HTMLElement, formatted: string): void;\\n}\\n\\n// playground: stackblitz.com/edit/countup-typescript\\nexport class CountUp {\\n\\n  version = '2.6.2';\\n  private defaults: CountUpOptions = {\\n    startVal: 0,\\n    decimalPlaces: 0,\\n    duration: 2,\\n    useEasing: true,\\n    useGrouping: true,\\n    useIndianSeparators: false,\\n    smartEasingThreshold: 999,\\n    smartEasingAmount: 333,\\n    separator: ',',\\n    decimal: '.',\\n    prefix: '',\\n    suffix: '',\\n    enableScrollSpy: false,\\n    scrollSpyDelay: 200,\\n    scrollSpyOnce: false,\\n  };\\n  private rAF: any;\\n  private startTime: number;\\n  private remaining: number;\\n  private finalEndVal: number = null; // for smart easing\\n  private useEasing = true;\\n  private countDown = false;\\n  el: HTMLElement | HTMLInputElement;\\n  formattingFn: (num: number) => string;\\n  easingFn?: (t: number, b: number, c: number, d: number) => number;\\n  error = '';\\n  startVal = 0;\\n  duration: number;\\n  paused = true;\\n  frameVal: number;\\n  once = false;\\n\\n  constructor(\\n    target: string | HTMLElement | HTMLInputElement,\\n    private endVal: number,\\n    public options?: CountUpOptions\\n  ) {\\n    this.options = {\\n      ...this.defaults,\\n      ...options\\n    };\\n    this.formattingFn = (this.options.formattingFn) ?\\n      this.options.formattingFn : this.formatNumber;\\n    this.easingFn = (this.options.easingFn) ?\\n      this.options.easingFn : this.easeOutExpo;\\n\\n    this.startVal = this.validateValue(this.options.startVal);\\n    this.frameVal = this.startVal;\\n    this.endVal = this.validateValue(endVal);\\n    this.options.decimalPlaces = Math.max(0 || this.options.decimalPlaces);\\n    this.resetDuration();\\n    this.options.separator = String(this.options.separator);\\n    this.useEasing = this.options.useEasing;\\n    if (this.options.separator === '') {\\n      this.options.useGrouping = false;\\n    }\\n    this.el = (typeof target === 'string') ? document.getElementById(target) : target;\\n    if (this.el) {\\n      this.printValue(this.startVal);\\n    } else {\\n      this.error = '[CountUp] target is null or undefined';\\n    }\\n\\n    // scroll spy\\n    if (typeof window !== 'undefined' && this.options.enableScrollSpy) {\\n      if (!this.error) {\\n        // set up global array of onscroll functions to handle multiple instances\\n        window['onScrollFns'] = window['onScrollFns'] || [];\\n        window['onScrollFns'].push(() => this.handleScroll(this));\\n        window.onscroll = () => {\\n          window['onScrollFns'].forEach((fn) => fn());\\n        };\\n        this.handleScroll(this);\\n      } else {\\n        console.error(this.error, target);\\n      }\\n    }\\n  }\\n\\n  handleScroll(self: CountUp): void {\\n    if (!self || !window || self.once) return;\\n    const bottomOfScroll = window.innerHeight +  window.scrollY;\\n    const rect = self.el.getBoundingClientRect();\\n    const topOfEl = rect.top + window.pageYOffset\\n    const bottomOfEl = rect.top + rect.height + window.pageYOffset;\\n    if (bottomOfEl < bottomOfScroll && bottomOfEl >  window.scrollY && self.paused) {\\n      // in view\\n      self.paused = false;\\n      setTimeout(() => self.start(), self.options.scrollSpyDelay);\\n      if (self.options.scrollSpyOnce)\\n        self.once = true;\\n    } else if (\\n        (window.scrollY > bottomOfEl || topOfEl > bottomOfScroll) &&\\n        !self.paused\\n      ) {\\n      // out of view\\n      self.reset();\\n    }\\n  }\\n\\n  /**\\n   * Smart easing works by breaking the animation into 2 parts, the second part being the\\n   * smartEasingAmount and first part being the total amount minus the smartEasingAmount. It works\\n   * by disabling easing for the first part and enabling it on the second part. It is used if\\n   * useEasing is true and the total animation amount exceeds the smartEasingThreshold.\\n   */\\n  private determineDirectionAndSmartEasing(): void {\\n    const end = (this.finalEndVal) ? this.finalEndVal : this.endVal;\\n    this.countDown = (this.startVal > end);\\n    const animateAmount = end - this.startVal;\\n    if (Math.abs(animateAmount) > this.options.smartEasingThreshold && this.options.useEasing) {\\n      this.finalEndVal = end;\\n      const up = (this.countDown) ? 1 : -1;\\n      this.endVal = end + (up * this.options.smartEasingAmount);\\n      this.duration = this.duration / 2;\\n    } else {\\n      this.endVal = end;\\n      this.finalEndVal = null;\\n    }\\n    if (this.finalEndVal !== null) {\\n      // setting finalEndVal indicates smart easing\\n      this.useEasing = false;\\n    } else {\\n      this.useEasing = this.options.useEasing;\\n    }\\n  }\\n\\n  // start animation\\n  start(callback?: (args?: any) => any): void {\\n    if (this.error) {\\n      return;\\n    }\\n    if (callback) {\\n      this.options.onCompleteCallback = callback;\\n    }\\n    if (this.duration > 0) {\\n      this.determineDirectionAndSmartEasing();\\n      this.paused = false;\\n      this.rAF = requestAnimationFrame(this.count);\\n    } else {\\n      this.printValue(this.endVal);\\n    }\\n  }\\n\\n  // pause/resume animation\\n  pauseResume(): void {\\n    if (!this.paused) {\\n      cancelAnimationFrame(this.rAF);\\n    } else {\\n      this.startTime = null;\\n      this.duration = this.remaining;\\n      this.startVal = this.frameVal;\\n      this.determineDirectionAndSmartEasing();\\n      this.rAF = requestAnimationFrame(this.count);\\n    }\\n    this.paused = !this.paused;\\n  }\\n\\n  // reset to startVal so animation can be run again\\n  reset(): void {\\n    cancelAnimationFrame(this.rAF);\\n    this.paused = true;\\n    this.resetDuration();\\n    this.startVal = this.validateValue(this.options.startVal);\\n    this.frameVal = this.startVal;\\n    this.printValue(this.startVal);\\n  }\\n\\n  // pass a new endVal and start animation\\n  update(newEndVal: string | number): void {\\n    cancelAnimationFrame(this.rAF);\\n    this.startTime = null;\\n    this.endVal = this.validateValue(newEndVal);\\n    if (this.endVal === this.frameVal) {\\n      return;\\n    }\\n    this.startVal = this.frameVal;\\n    if (this.finalEndVal == null) {\\n      this.resetDuration();\\n    }\\n    this.finalEndVal = null;\\n    this.determineDirectionAndSmartEasing();\\n    this.rAF = requestAnimationFrame(this.count);\\n  }\\n\\n  count = (timestamp: number): void => {\\n    if (!this.startTime) { this.startTime = timestamp; }\\n\\n    const progress = timestamp - this.startTime;\\n    this.remaining = this.duration - progress;\\n\\n    // to ease or not to ease\\n    if (this.useEasing) {\\n      if (this.countDown) {\\n        this.frameVal = this.startVal - this.easingFn(progress, 0, this.startVal - this.endVal, this.duration);\\n      } else {\\n        this.frameVal = this.easingFn(progress, this.startVal, this.endVal - this.startVal, this.duration);\\n      }\\n    } else {\\n      this.frameVal = this.startVal + (this.endVal - this.startVal) * (progress / this.duration);\\n    }\\n\\n    // don't go past endVal since progress can exceed duration in the last frame\\n    const wentPast = this.countDown ? this.frameVal < this.endVal : this.frameVal > this.endVal;\\n    this.frameVal = wentPast ? this.endVal : this.frameVal;\\n\\n    // decimal\\n    this.frameVal = Number(this.frameVal.toFixed(this.options.decimalPlaces));\\n\\n    // format and print value\\n    this.printValue(this.frameVal);\\n\\n    // whether to continue\\n    if (progress < this.duration) {\\n      this.rAF = requestAnimationFrame(this.count);\\n    } else if (this.finalEndVal !== null) {\\n      // smart easing\\n      this.update(this.finalEndVal);\\n    } else {\\n      if (this.options.onCompleteCallback) {\\n        this.options.onCompleteCallback();\\n      }\\n    }\\n  }\\n\\n  printValue(val: number): void {\\n    if (!this.el) return;\\n    const result = this.formattingFn(val);\\n    if (this.options.plugin?.render) {\\n      this.options.plugin.render(this.el, result);\\n      return;\\n    }\\n    if (this.el.tagName === 'INPUT') {\\n      const input = this.el as HTMLInputElement;\\n      input.value = result;\\n    } else if (this.el.tagName === 'text' || this.el.tagName === 'tspan') {\\n      this.el.textContent = result;\\n    } else {\\n      this.el.innerHTML = result;\\n    }\\n  }\\n\\n  ensureNumber(n: any): boolean {\\n    return (typeof n === 'number' && !isNaN(n));\\n  }\\n\\n  validateValue(value: string | number): number {\\n    const newValue = Number(value);\\n    if (!this.ensureNumber(newValue)) {\\n      this.error = `[CountUp] invalid start or end value: ${value}`;\\n      return null;\\n    } else {\\n      return newValue;\\n    }\\n  }\\n\\n  private resetDuration(): void {\\n    this.startTime = null;\\n    this.duration = Number(this.options.duration) * 1000;\\n    this.remaining = this.duration;\\n  }\\n\\n  // default format and easing functions\\n\\n  formatNumber = (num: number): string => {\\n    const neg = (num < 0) ? '-' : '';\\n    let result: string, x1: string, x2: string, x3: string;\\n    result = Math.abs(num).toFixed(this.options.decimalPlaces);\\n    result += '';\\n    const x = result.split('.');\\n    x1 = x[0];\\n    x2 = x.length > 1 ? this.options.decimal + x[1] : '';\\n    if (this.options.useGrouping) {\\n      x3 = '';\\n      let factor = 3, j = 0;\\n      for (let i = 0, len = x1.length; i < len; ++i) {\\n        if (this.options.useIndianSeparators && i === 4) {\\n          factor = 2;\\n          j = 1;\\n        }\\n        if (i !== 0 && (j % factor) === 0) {\\n          x3 = this.options.separator + x3;\\n        }\\n        j++;\\n        x3 = x1[len - i - 1] + x3;\\n      }\\n      x1 = x3;\\n    }\\n    // optional numeral substitution\\n    if (this.options.numerals && this.options.numerals.length) {\\n      x1 = x1.replace(/[0-9]/g, (w) => this.options.numerals[+w]);\\n      x2 = x2.replace(/[0-9]/g, (w) => this.options.numerals[+w]);\\n    }\\n    return neg + this.options.prefix + x1 + x2 + this.options.suffix;\\n  }\\n\\n  // t: current time, b: beginning value, c: change in value, d: duration\\n  easeOutExpo = (t: number, b: number, c: number, d: number): number =>\\n    c * (-Math.pow(2, -10 * t / d) + 1) * 1024 / 1023 + b;\\n}\\n      \")])])\n}]\n\nexport { render, staticRenderFns }","var t=function(){return t=Object.assign||function(t){for(var i,n=1,s=arguments.length;n<s;n++)for(var a in i=arguments[n])Object.prototype.hasOwnProperty.call(i,a)&&(t[a]=i[a]);return t},t.apply(this,arguments)},i=function(){function i(i,n,s){var a=this;this.endVal=n,this.options=s,this.version=\"2.6.2\",this.defaults={startVal:0,decimalPlaces:0,duration:2,useEasing:!0,useGrouping:!0,useIndianSeparators:!1,smartEasingThreshold:999,smartEasingAmount:333,separator:\",\",decimal:\".\",prefix:\"\",suffix:\"\",enableScrollSpy:!1,scrollSpyDelay:200,scrollSpyOnce:!1},this.finalEndVal=null,this.useEasing=!0,this.countDown=!1,this.error=\"\",this.startVal=0,this.paused=!0,this.once=!1,this.count=function(t){a.startTime||(a.startTime=t);var i=t-a.startTime;a.remaining=a.duration-i,a.useEasing?a.countDown?a.frameVal=a.startVal-a.easingFn(i,0,a.startVal-a.endVal,a.duration):a.frameVal=a.easingFn(i,a.startVal,a.endVal-a.startVal,a.duration):a.frameVal=a.startVal+(a.endVal-a.startVal)*(i/a.duration);var n=a.countDown?a.frameVal<a.endVal:a.frameVal>a.endVal;a.frameVal=n?a.endVal:a.frameVal,a.frameVal=Number(a.frameVal.toFixed(a.options.decimalPlaces)),a.printValue(a.frameVal),i<a.duration?a.rAF=requestAnimationFrame(a.count):null!==a.finalEndVal?a.update(a.finalEndVal):a.options.onCompleteCallback&&a.options.onCompleteCallback()},this.formatNumber=function(t){var i,n,s,e,o=t<0?\"-\":\"\";i=Math.abs(t).toFixed(a.options.decimalPlaces);var r=(i+=\"\").split(\".\");if(n=r[0],s=r.length>1?a.options.decimal+r[1]:\"\",a.options.useGrouping){e=\"\";for(var l=3,h=0,u=0,p=n.length;u<p;++u)a.options.useIndianSeparators&&4===u&&(l=2,h=1),0!==u&&h%l==0&&(e=a.options.separator+e),h++,e=n[p-u-1]+e;n=e}return a.options.numerals&&a.options.numerals.length&&(n=n.replace(/[0-9]/g,(function(t){return a.options.numerals[+t]})),s=s.replace(/[0-9]/g,(function(t){return a.options.numerals[+t]}))),o+a.options.prefix+n+s+a.options.suffix},this.easeOutExpo=function(t,i,n,s){return n*(1-Math.pow(2,-10*t/s))*1024/1023+i},this.options=t(t({},this.defaults),s),this.formattingFn=this.options.formattingFn?this.options.formattingFn:this.formatNumber,this.easingFn=this.options.easingFn?this.options.easingFn:this.easeOutExpo,this.startVal=this.validateValue(this.options.startVal),this.frameVal=this.startVal,this.endVal=this.validateValue(n),this.options.decimalPlaces=Math.max(this.options.decimalPlaces),this.resetDuration(),this.options.separator=String(this.options.separator),this.useEasing=this.options.useEasing,\"\"===this.options.separator&&(this.options.useGrouping=!1),this.el=\"string\"==typeof i?document.getElementById(i):i,this.el?this.printValue(this.startVal):this.error=\"[CountUp] target is null or undefined\",\"undefined\"!=typeof window&&this.options.enableScrollSpy&&(this.error?console.error(this.error,i):(window.onScrollFns=window.onScrollFns||[],window.onScrollFns.push((function(){return a.handleScroll(a)})),window.onscroll=function(){window.onScrollFns.forEach((function(t){return t()}))},this.handleScroll(this)))}return i.prototype.handleScroll=function(t){if(t&&window&&!t.once){var i=window.innerHeight+window.scrollY,n=t.el.getBoundingClientRect(),s=n.top+window.pageYOffset,a=n.top+n.height+window.pageYOffset;a<i&&a>window.scrollY&&t.paused?(t.paused=!1,setTimeout((function(){return t.start()}),t.options.scrollSpyDelay),t.options.scrollSpyOnce&&(t.once=!0)):(window.scrollY>a||s>i)&&!t.paused&&t.reset()}},i.prototype.determineDirectionAndSmartEasing=function(){var t=this.finalEndVal?this.finalEndVal:this.endVal;this.countDown=this.startVal>t;var i=t-this.startVal;if(Math.abs(i)>this.options.smartEasingThreshold&&this.options.useEasing){this.finalEndVal=t;var n=this.countDown?1:-1;this.endVal=t+n*this.options.smartEasingAmount,this.duration=this.duration/2}else this.endVal=t,this.finalEndVal=null;null!==this.finalEndVal?this.useEasing=!1:this.useEasing=this.options.useEasing},i.prototype.start=function(t){this.error||(t&&(this.options.onCompleteCallback=t),this.duration>0?(this.determineDirectionAndSmartEasing(),this.paused=!1,this.rAF=requestAnimationFrame(this.count)):this.printValue(this.endVal))},i.prototype.pauseResume=function(){this.paused?(this.startTime=null,this.duration=this.remaining,this.startVal=this.frameVal,this.determineDirectionAndSmartEasing(),this.rAF=requestAnimationFrame(this.count)):cancelAnimationFrame(this.rAF),this.paused=!this.paused},i.prototype.reset=function(){cancelAnimationFrame(this.rAF),this.paused=!0,this.resetDuration(),this.startVal=this.validateValue(this.options.startVal),this.frameVal=this.startVal,this.printValue(this.startVal)},i.prototype.update=function(t){cancelAnimationFrame(this.rAF),this.startTime=null,this.endVal=this.validateValue(t),this.endVal!==this.frameVal&&(this.startVal=this.frameVal,null==this.finalEndVal&&this.resetDuration(),this.finalEndVal=null,this.determineDirectionAndSmartEasing(),this.rAF=requestAnimationFrame(this.count))},i.prototype.printValue=function(t){var i;if(this.el){var n=this.formattingFn(t);if(null===(i=this.options.plugin)||void 0===i?void 0:i.render)this.options.plugin.render(this.el,n);else if(\"INPUT\"===this.el.tagName)this.el.value=n;else\"text\"===this.el.tagName||\"tspan\"===this.el.tagName?this.el.textContent=n:this.el.innerHTML=n}},i.prototype.ensureNumber=function(t){return\"number\"==typeof t&&!isNaN(t)},i.prototype.validateValue=function(t){var i=Number(t);return this.ensureNumber(i)?i:(this.error=\"[CountUp] invalid start or end value: \".concat(t),null)},i.prototype.resetDuration=function(){this.startTime=null,this.duration=1e3*Number(this.options.duration),this.remaining=this.duration},i}();export{i as CountUp};\n","<template>\r\n  <div class=\"page\">\r\n    <h4>CountUp.js</h4>\r\n    <div class=\"blockquote\">\r\n      CountUp.js is a dependency-free, lightweight JavaScript class that can be used to quickly create animations that display numerical data in a more interesting way.\r\n      <a href=\"https://github.com/inorganik/CountUp.js\" target=\"_blank\">https://github.com/inorganik/CountUp.js</a>\r\n    </div>\r\n    <div class=\"demo\">\r\n      <h1 ref=\"target\"></h1>\r\n      <button class=\"btn btn-primary\" type=\"button\" @click=\"clickStart\">Start</button>\r\n    </div>\r\n    <div class=\"source mt-3\">\r\n      <pre>\r\nimport { CountUp } from 'countup.js'\r\n====================================\r\nexport interface CountUpOptions { // (default)\r\n  startVal?: number; // number to start at (0)\r\n  decimalPlaces?: number; // number of decimal places (0)\r\n  duration?: number; // animation duration in seconds (2)\r\n  useGrouping?: boolean; // example: 1,000 vs 1000 (true)\r\n  useIndianSeparators?: boolean; // example: 1,00,000 vs 100,000 (false)\r\n  useEasing?: boolean; // ease animation (true)\r\n  smartEasingThreshold?: number; // smooth easing for large numbers above this if useEasing (999)\r\n  smartEasingAmount?: number; // amount to be eased for numbers above threshold (333)\r\n  separator?: string; // grouping separator (,)\r\n  decimal?: string; // decimal (.)\r\n  // easingFn: easing function for animation (easeOutExpo)\r\n  easingFn?: (t: number, b: number, c: number, d: number) => number;\r\n  formattingFn?: (n: number) => string; // this function formats result\r\n  prefix?: string; // text prepended to result\r\n  suffix?: string; // text appended to result\r\n  numerals?: string[]; // numeral glyph substitution\r\n  enableScrollSpy?: boolean; // start animation when target is in view\r\n  scrollSpyDelay?: number; // delay (ms) after target comes into view\r\n  scrollSpyOnce?: boolean; // run only once\r\n  onCompleteCallback?: () => any; // gets called when animation completes\r\n  plugin?: CountUpPlugin; // for alternate animations\r\n}\r\n\r\nexport declare interface CountUpPlugin {\r\n  render(elem: HTMLElement, formatted: string): void;\r\n}\r\n\r\n// playground: stackblitz.com/edit/countup-typescript\r\nexport class CountUp {\r\n\r\n  version = '2.6.2';\r\n  private defaults: CountUpOptions = {\r\n    startVal: 0,\r\n    decimalPlaces: 0,\r\n    duration: 2,\r\n    useEasing: true,\r\n    useGrouping: true,\r\n    useIndianSeparators: false,\r\n    smartEasingThreshold: 999,\r\n    smartEasingAmount: 333,\r\n    separator: ',',\r\n    decimal: '.',\r\n    prefix: '',\r\n    suffix: '',\r\n    enableScrollSpy: false,\r\n    scrollSpyDelay: 200,\r\n    scrollSpyOnce: false,\r\n  };\r\n  private rAF: any;\r\n  private startTime: number;\r\n  private remaining: number;\r\n  private finalEndVal: number = null; // for smart easing\r\n  private useEasing = true;\r\n  private countDown = false;\r\n  el: HTMLElement | HTMLInputElement;\r\n  formattingFn: (num: number) => string;\r\n  easingFn?: (t: number, b: number, c: number, d: number) => number;\r\n  error = '';\r\n  startVal = 0;\r\n  duration: number;\r\n  paused = true;\r\n  frameVal: number;\r\n  once = false;\r\n\r\n  constructor(\r\n    target: string | HTMLElement | HTMLInputElement,\r\n    private endVal: number,\r\n    public options?: CountUpOptions\r\n  ) {\r\n    this.options = {\r\n      ...this.defaults,\r\n      ...options\r\n    };\r\n    this.formattingFn = (this.options.formattingFn) ?\r\n      this.options.formattingFn : this.formatNumber;\r\n    this.easingFn = (this.options.easingFn) ?\r\n      this.options.easingFn : this.easeOutExpo;\r\n\r\n    this.startVal = this.validateValue(this.options.startVal);\r\n    this.frameVal = this.startVal;\r\n    this.endVal = this.validateValue(endVal);\r\n    this.options.decimalPlaces = Math.max(0 || this.options.decimalPlaces);\r\n    this.resetDuration();\r\n    this.options.separator = String(this.options.separator);\r\n    this.useEasing = this.options.useEasing;\r\n    if (this.options.separator === '') {\r\n      this.options.useGrouping = false;\r\n    }\r\n    this.el = (typeof target === 'string') ? document.getElementById(target) : target;\r\n    if (this.el) {\r\n      this.printValue(this.startVal);\r\n    } else {\r\n      this.error = '[CountUp] target is null or undefined';\r\n    }\r\n\r\n    // scroll spy\r\n    if (typeof window !== 'undefined' && this.options.enableScrollSpy) {\r\n      if (!this.error) {\r\n        // set up global array of onscroll functions to handle multiple instances\r\n        window['onScrollFns'] = window['onScrollFns'] || [];\r\n        window['onScrollFns'].push(() => this.handleScroll(this));\r\n        window.onscroll = () => {\r\n          window['onScrollFns'].forEach((fn) => fn());\r\n        };\r\n        this.handleScroll(this);\r\n      } else {\r\n        console.error(this.error, target);\r\n      }\r\n    }\r\n  }\r\n\r\n  handleScroll(self: CountUp): void {\r\n    if (!self || !window || self.once) return;\r\n    const bottomOfScroll = window.innerHeight +  window.scrollY;\r\n    const rect = self.el.getBoundingClientRect();\r\n    const topOfEl = rect.top + window.pageYOffset\r\n    const bottomOfEl = rect.top + rect.height + window.pageYOffset;\r\n    if (bottomOfEl &lt; bottomOfScroll && bottomOfEl &gt;  window.scrollY && self.paused) {\r\n      // in view\r\n      self.paused = false;\r\n      setTimeout(() => self.start(), self.options.scrollSpyDelay);\r\n      if (self.options.scrollSpyOnce)\r\n        self.once = true;\r\n    } else if (\r\n        (window.scrollY > bottomOfEl || topOfEl > bottomOfScroll) &&\r\n        !self.paused\r\n      ) {\r\n      // out of view\r\n      self.reset();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Smart easing works by breaking the animation into 2 parts, the second part being the\r\n   * smartEasingAmount and first part being the total amount minus the smartEasingAmount. It works\r\n   * by disabling easing for the first part and enabling it on the second part. It is used if\r\n   * useEasing is true and the total animation amount exceeds the smartEasingThreshold.\r\n   */\r\n  private determineDirectionAndSmartEasing(): void {\r\n    const end = (this.finalEndVal) ? this.finalEndVal : this.endVal;\r\n    this.countDown = (this.startVal > end);\r\n    const animateAmount = end - this.startVal;\r\n    if (Math.abs(animateAmount) > this.options.smartEasingThreshold && this.options.useEasing) {\r\n      this.finalEndVal = end;\r\n      const up = (this.countDown) ? 1 : -1;\r\n      this.endVal = end + (up * this.options.smartEasingAmount);\r\n      this.duration = this.duration / 2;\r\n    } else {\r\n      this.endVal = end;\r\n      this.finalEndVal = null;\r\n    }\r\n    if (this.finalEndVal !== null) {\r\n      // setting finalEndVal indicates smart easing\r\n      this.useEasing = false;\r\n    } else {\r\n      this.useEasing = this.options.useEasing;\r\n    }\r\n  }\r\n\r\n  // start animation\r\n  start(callback?: (args?: any) => any): void {\r\n    if (this.error) {\r\n      return;\r\n    }\r\n    if (callback) {\r\n      this.options.onCompleteCallback = callback;\r\n    }\r\n    if (this.duration > 0) {\r\n      this.determineDirectionAndSmartEasing();\r\n      this.paused = false;\r\n      this.rAF = requestAnimationFrame(this.count);\r\n    } else {\r\n      this.printValue(this.endVal);\r\n    }\r\n  }\r\n\r\n  // pause/resume animation\r\n  pauseResume(): void {\r\n    if (!this.paused) {\r\n      cancelAnimationFrame(this.rAF);\r\n    } else {\r\n      this.startTime = null;\r\n      this.duration = this.remaining;\r\n      this.startVal = this.frameVal;\r\n      this.determineDirectionAndSmartEasing();\r\n      this.rAF = requestAnimationFrame(this.count);\r\n    }\r\n    this.paused = !this.paused;\r\n  }\r\n\r\n  // reset to startVal so animation can be run again\r\n  reset(): void {\r\n    cancelAnimationFrame(this.rAF);\r\n    this.paused = true;\r\n    this.resetDuration();\r\n    this.startVal = this.validateValue(this.options.startVal);\r\n    this.frameVal = this.startVal;\r\n    this.printValue(this.startVal);\r\n  }\r\n\r\n  // pass a new endVal and start animation\r\n  update(newEndVal: string | number): void {\r\n    cancelAnimationFrame(this.rAF);\r\n    this.startTime = null;\r\n    this.endVal = this.validateValue(newEndVal);\r\n    if (this.endVal === this.frameVal) {\r\n      return;\r\n    }\r\n    this.startVal = this.frameVal;\r\n    if (this.finalEndVal == null) {\r\n      this.resetDuration();\r\n    }\r\n    this.finalEndVal = null;\r\n    this.determineDirectionAndSmartEasing();\r\n    this.rAF = requestAnimationFrame(this.count);\r\n  }\r\n\r\n  count = (timestamp: number): void => {\r\n    if (!this.startTime) { this.startTime = timestamp; }\r\n\r\n    const progress = timestamp - this.startTime;\r\n    this.remaining = this.duration - progress;\r\n\r\n    // to ease or not to ease\r\n    if (this.useEasing) {\r\n      if (this.countDown) {\r\n        this.frameVal = this.startVal - this.easingFn(progress, 0, this.startVal - this.endVal, this.duration);\r\n      } else {\r\n        this.frameVal = this.easingFn(progress, this.startVal, this.endVal - this.startVal, this.duration);\r\n      }\r\n    } else {\r\n      this.frameVal = this.startVal + (this.endVal - this.startVal) * (progress / this.duration);\r\n    }\r\n\r\n    // don't go past endVal since progress can exceed duration in the last frame\r\n    const wentPast = this.countDown ? this.frameVal &lt; this.endVal : this.frameVal &gt; this.endVal;\r\n    this.frameVal = wentPast ? this.endVal : this.frameVal;\r\n\r\n    // decimal\r\n    this.frameVal = Number(this.frameVal.toFixed(this.options.decimalPlaces));\r\n\r\n    // format and print value\r\n    this.printValue(this.frameVal);\r\n\r\n    // whether to continue\r\n    if (progress &lt; this.duration) {\r\n      this.rAF = requestAnimationFrame(this.count);\r\n    } else if (this.finalEndVal !== null) {\r\n      // smart easing\r\n      this.update(this.finalEndVal);\r\n    } else {\r\n      if (this.options.onCompleteCallback) {\r\n        this.options.onCompleteCallback();\r\n      }\r\n    }\r\n  }\r\n\r\n  printValue(val: number): void {\r\n    if (!this.el) return;\r\n    const result = this.formattingFn(val);\r\n    if (this.options.plugin?.render) {\r\n      this.options.plugin.render(this.el, result);\r\n      return;\r\n    }\r\n    if (this.el.tagName === 'INPUT') {\r\n      const input = this.el as HTMLInputElement;\r\n      input.value = result;\r\n    } else if (this.el.tagName === 'text' || this.el.tagName === 'tspan') {\r\n      this.el.textContent = result;\r\n    } else {\r\n      this.el.innerHTML = result;\r\n    }\r\n  }\r\n\r\n  ensureNumber(n: any): boolean {\r\n    return (typeof n === 'number' && !isNaN(n));\r\n  }\r\n\r\n  validateValue(value: string | number): number {\r\n    const newValue = Number(value);\r\n    if (!this.ensureNumber(newValue)) {\r\n      this.error = `[CountUp] invalid start or end value: ${value}`;\r\n      return null;\r\n    } else {\r\n      return newValue;\r\n    }\r\n  }\r\n\r\n  private resetDuration(): void {\r\n    this.startTime = null;\r\n    this.duration = Number(this.options.duration) * 1000;\r\n    this.remaining = this.duration;\r\n  }\r\n\r\n  // default format and easing functions\r\n\r\n  formatNumber = (num: number): string => {\r\n    const neg = (num &lt; 0) ? '-' : '';\r\n    let result: string, x1: string, x2: string, x3: string;\r\n    result = Math.abs(num).toFixed(this.options.decimalPlaces);\r\n    result += '';\r\n    const x = result.split('.');\r\n    x1 = x[0];\r\n    x2 = x.length > 1 ? this.options.decimal + x[1] : '';\r\n    if (this.options.useGrouping) {\r\n      x3 = '';\r\n      let factor = 3, j = 0;\r\n      for (let i = 0, len = x1.length; i &lt; len; ++i) {\r\n        if (this.options.useIndianSeparators && i === 4) {\r\n          factor = 2;\r\n          j = 1;\r\n        }\r\n        if (i !== 0 && (j % factor) === 0) {\r\n          x3 = this.options.separator + x3;\r\n        }\r\n        j++;\r\n        x3 = x1[len - i - 1] + x3;\r\n      }\r\n      x1 = x3;\r\n    }\r\n    // optional numeral substitution\r\n    if (this.options.numerals && this.options.numerals.length) {\r\n      x1 = x1.replace(/[0-9]/g, (w) => this.options.numerals[+w]);\r\n      x2 = x2.replace(/[0-9]/g, (w) => this.options.numerals[+w]);\r\n    }\r\n    return neg + this.options.prefix + x1 + x2 + this.options.suffix;\r\n  }\r\n\r\n  // t: current time, b: beginning value, c: change in value, d: duration\r\n  easeOutExpo = (t: number, b: number, c: number, d: number): number =>\r\n    c * (-Math.pow(2, -10 * t / d) + 1) * 1024 / 1023 + b;\r\n}\r\n      </pre>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { CountUp } from 'countup.js'\r\n\r\nexport default {\r\n  name: 'count-up',\r\n  data () {\r\n    return {\r\n      count: 0,\r\n      countUp: null,\r\n    }\r\n  },\r\n  mounted () {\r\n    const target = this.$refs.target\r\n    this.countUp = new CountUp(target, this.count)\r\n  },\r\n  methods: {\r\n    clickStart () {\r\n      if (this.countUp) {\r\n        this.countUp.update(Math.round(Math.random() * 1000000))\r\n      }\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=a8fe5f9c&scoped=true&\"\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"a8fe5f9c\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","staticClass","_v","_m","ref","attrs","on","clickStart","staticRenderFns","t","Object","assign","i","n","s","arguments","length","a","prototype","hasOwnProperty","call","apply","endVal","options","version","defaults","startVal","decimalPlaces","duration","useEasing","useGrouping","useIndianSeparators","smartEasingThreshold","smartEasingAmount","separator","decimal","prefix","suffix","enableScrollSpy","scrollSpyDelay","scrollSpyOnce","finalEndVal","countDown","error","paused","once","count","startTime","remaining","frameVal","easingFn","Number","toFixed","printValue","rAF","requestAnimationFrame","update","onCompleteCallback","formatNumber","e","o","Math","abs","r","split","l","h","u","p","numerals","replace","easeOutExpo","pow","formattingFn","validateValue","max","resetDuration","String","el","document","getElementById","window","console","onScrollFns","push","handleScroll","onscroll","forEach","innerHeight","scrollY","getBoundingClientRect","top","pageYOffset","height","setTimeout","start","reset","determineDirectionAndSmartEasing","pauseResume","cancelAnimationFrame","plugin","tagName","value","textContent","innerHTML","ensureNumber","isNaN","concat","name","data","countUp","mounted","target","$refs","CountUp","methods","round","random","component"],"sourceRoot":""}