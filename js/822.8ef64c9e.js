"use strict";(self["webpackChunksnippets_admin"]=self["webpackChunksnippets_admin"]||[]).push([[822],{60822:function(n,t,i){i.r(t),i.d(t,{default:function(){return p}});var e=function(){var n=this,t=n._self._c;return t("div",{staticClass:"page"},[t("h4",[n._v("CountUp.js")]),n._m(0),t("div",{staticClass:"demo"},[t("h1",{ref:"target"}),t("button",{staticClass:"btn btn-primary",attrs:{type:"button"},on:{click:n.clickStart}},[n._v("Start")])]),n._m(1)])},s=[function(){var n=this,t=n._self._c;return t("div",{staticClass:"blockquote"},[n._v(" CountUp.js is a dependency-free, lightweight JavaScript class that can be used to quickly create animations that display numerical data in a more interesting way. "),t("a",{attrs:{href:"https://github.com/inorganik/CountUp.js",target:"_blank"}},[n._v("https://github.com/inorganik/CountUp.js")])])},function(){var n=this,t=n._self._c;return t("div",{staticClass:"source mt-3"},[t("pre",[n._v("import { CountUp } from 'countup.js'\n====================================\nexport interface CountUpOptions { // (default)\n  startVal?: number; // number to start at (0)\n  decimalPlaces?: number; // number of decimal places (0)\n  duration?: number; // animation duration in seconds (2)\n  useGrouping?: boolean; // example: 1,000 vs 1000 (true)\n  useIndianSeparators?: boolean; // example: 1,00,000 vs 100,000 (false)\n  useEasing?: boolean; // ease animation (true)\n  smartEasingThreshold?: number; // smooth easing for large numbers above this if useEasing (999)\n  smartEasingAmount?: number; // amount to be eased for numbers above threshold (333)\n  separator?: string; // grouping separator (,)\n  decimal?: string; // decimal (.)\n  // easingFn: easing function for animation (easeOutExpo)\n  easingFn?: (t: number, b: number, c: number, d: number) => number;\n  formattingFn?: (n: number) => string; // this function formats result\n  prefix?: string; // text prepended to result\n  suffix?: string; // text appended to result\n  numerals?: string[]; // numeral glyph substitution\n  enableScrollSpy?: boolean; // start animation when target is in view\n  scrollSpyDelay?: number; // delay (ms) after target comes into view\n  scrollSpyOnce?: boolean; // run only once\n  onCompleteCallback?: () => any; // gets called when animation completes\n  plugin?: CountUpPlugin; // for alternate animations\n}\n\nexport declare interface CountUpPlugin {\n  render(elem: HTMLElement, formatted: string): void;\n}\n\n// playground: stackblitz.com/edit/countup-typescript\nexport class CountUp {\n\n  version = '2.6.2';\n  private defaults: CountUpOptions = {\n    startVal: 0,\n    decimalPlaces: 0,\n    duration: 2,\n    useEasing: true,\n    useGrouping: true,\n    useIndianSeparators: false,\n    smartEasingThreshold: 999,\n    smartEasingAmount: 333,\n    separator: ',',\n    decimal: '.',\n    prefix: '',\n    suffix: '',\n    enableScrollSpy: false,\n    scrollSpyDelay: 200,\n    scrollSpyOnce: false,\n  };\n  private rAF: any;\n  private startTime: number;\n  private remaining: number;\n  private finalEndVal: number = null; // for smart easing\n  private useEasing = true;\n  private countDown = false;\n  el: HTMLElement | HTMLInputElement;\n  formattingFn: (num: number) => string;\n  easingFn?: (t: number, b: number, c: number, d: number) => number;\n  error = '';\n  startVal = 0;\n  duration: number;\n  paused = true;\n  frameVal: number;\n  once = false;\n\n  constructor(\n    target: string | HTMLElement | HTMLInputElement,\n    private endVal: number,\n    public options?: CountUpOptions\n  ) {\n    this.options = {\n      ...this.defaults,\n      ...options\n    };\n    this.formattingFn = (this.options.formattingFn) ?\n      this.options.formattingFn : this.formatNumber;\n    this.easingFn = (this.options.easingFn) ?\n      this.options.easingFn : this.easeOutExpo;\n\n    this.startVal = this.validateValue(this.options.startVal);\n    this.frameVal = this.startVal;\n    this.endVal = this.validateValue(endVal);\n    this.options.decimalPlaces = Math.max(0 || this.options.decimalPlaces);\n    this.resetDuration();\n    this.options.separator = String(this.options.separator);\n    this.useEasing = this.options.useEasing;\n    if (this.options.separator === '') {\n      this.options.useGrouping = false;\n    }\n    this.el = (typeof target === 'string') ? document.getElementById(target) : target;\n    if (this.el) {\n      this.printValue(this.startVal);\n    } else {\n      this.error = '[CountUp] target is null or undefined';\n    }\n\n    // scroll spy\n    if (typeof window !== 'undefined' && this.options.enableScrollSpy) {\n      if (!this.error) {\n        // set up global array of onscroll functions to handle multiple instances\n        window['onScrollFns'] = window['onScrollFns'] || [];\n        window['onScrollFns'].push(() => this.handleScroll(this));\n        window.onscroll = () => {\n          window['onScrollFns'].forEach((fn) => fn());\n        };\n        this.handleScroll(this);\n      } else {\n        console.error(this.error, target);\n      }\n    }\n  }\n\n  handleScroll(self: CountUp): void {\n    if (!self || !window || self.once) return;\n    const bottomOfScroll = window.innerHeight +  window.scrollY;\n    const rect = self.el.getBoundingClientRect();\n    const topOfEl = rect.top + window.pageYOffset\n    const bottomOfEl = rect.top + rect.height + window.pageYOffset;\n    if (bottomOfEl < bottomOfScroll && bottomOfEl >  window.scrollY && self.paused) {\n      // in view\n      self.paused = false;\n      setTimeout(() => self.start(), self.options.scrollSpyDelay);\n      if (self.options.scrollSpyOnce)\n        self.once = true;\n    } else if (\n        (window.scrollY > bottomOfEl || topOfEl > bottomOfScroll) &&\n        !self.paused\n      ) {\n      // out of view\n      self.reset();\n    }\n  }\n\n  /**\n   * Smart easing works by breaking the animation into 2 parts, the second part being the\n   * smartEasingAmount and first part being the total amount minus the smartEasingAmount. It works\n   * by disabling easing for the first part and enabling it on the second part. It is used if\n   * useEasing is true and the total animation amount exceeds the smartEasingThreshold.\n   */\n  private determineDirectionAndSmartEasing(): void {\n    const end = (this.finalEndVal) ? this.finalEndVal : this.endVal;\n    this.countDown = (this.startVal > end);\n    const animateAmount = end - this.startVal;\n    if (Math.abs(animateAmount) > this.options.smartEasingThreshold && this.options.useEasing) {\n      this.finalEndVal = end;\n      const up = (this.countDown) ? 1 : -1;\n      this.endVal = end + (up * this.options.smartEasingAmount);\n      this.duration = this.duration / 2;\n    } else {\n      this.endVal = end;\n      this.finalEndVal = null;\n    }\n    if (this.finalEndVal !== null) {\n      // setting finalEndVal indicates smart easing\n      this.useEasing = false;\n    } else {\n      this.useEasing = this.options.useEasing;\n    }\n  }\n\n  // start animation\n  start(callback?: (args?: any) => any): void {\n    if (this.error) {\n      return;\n    }\n    if (callback) {\n      this.options.onCompleteCallback = callback;\n    }\n    if (this.duration > 0) {\n      this.determineDirectionAndSmartEasing();\n      this.paused = false;\n      this.rAF = requestAnimationFrame(this.count);\n    } else {\n      this.printValue(this.endVal);\n    }\n  }\n\n  // pause/resume animation\n  pauseResume(): void {\n    if (!this.paused) {\n      cancelAnimationFrame(this.rAF);\n    } else {\n      this.startTime = null;\n      this.duration = this.remaining;\n      this.startVal = this.frameVal;\n      this.determineDirectionAndSmartEasing();\n      this.rAF = requestAnimationFrame(this.count);\n    }\n    this.paused = !this.paused;\n  }\n\n  // reset to startVal so animation can be run again\n  reset(): void {\n    cancelAnimationFrame(this.rAF);\n    this.paused = true;\n    this.resetDuration();\n    this.startVal = this.validateValue(this.options.startVal);\n    this.frameVal = this.startVal;\n    this.printValue(this.startVal);\n  }\n\n  // pass a new endVal and start animation\n  update(newEndVal: string | number): void {\n    cancelAnimationFrame(this.rAF);\n    this.startTime = null;\n    this.endVal = this.validateValue(newEndVal);\n    if (this.endVal === this.frameVal) {\n      return;\n    }\n    this.startVal = this.frameVal;\n    if (this.finalEndVal == null) {\n      this.resetDuration();\n    }\n    this.finalEndVal = null;\n    this.determineDirectionAndSmartEasing();\n    this.rAF = requestAnimationFrame(this.count);\n  }\n\n  count = (timestamp: number): void => {\n    if (!this.startTime) { this.startTime = timestamp; }\n\n    const progress = timestamp - this.startTime;\n    this.remaining = this.duration - progress;\n\n    // to ease or not to ease\n    if (this.useEasing) {\n      if (this.countDown) {\n        this.frameVal = this.startVal - this.easingFn(progress, 0, this.startVal - this.endVal, this.duration);\n      } else {\n        this.frameVal = this.easingFn(progress, this.startVal, this.endVal - this.startVal, this.duration);\n      }\n    } else {\n      this.frameVal = this.startVal + (this.endVal - this.startVal) * (progress / this.duration);\n    }\n\n    // don't go past endVal since progress can exceed duration in the last frame\n    const wentPast = this.countDown ? this.frameVal < this.endVal : this.frameVal > this.endVal;\n    this.frameVal = wentPast ? this.endVal : this.frameVal;\n\n    // decimal\n    this.frameVal = Number(this.frameVal.toFixed(this.options.decimalPlaces));\n\n    // format and print value\n    this.printValue(this.frameVal);\n\n    // whether to continue\n    if (progress < this.duration) {\n      this.rAF = requestAnimationFrame(this.count);\n    } else if (this.finalEndVal !== null) {\n      // smart easing\n      this.update(this.finalEndVal);\n    } else {\n      if (this.options.onCompleteCallback) {\n        this.options.onCompleteCallback();\n      }\n    }\n  }\n\n  printValue(val: number): void {\n    if (!this.el) return;\n    const result = this.formattingFn(val);\n    if (this.options.plugin?.render) {\n      this.options.plugin.render(this.el, result);\n      return;\n    }\n    if (this.el.tagName === 'INPUT') {\n      const input = this.el as HTMLInputElement;\n      input.value = result;\n    } else if (this.el.tagName === 'text' || this.el.tagName === 'tspan') {\n      this.el.textContent = result;\n    } else {\n      this.el.innerHTML = result;\n    }\n  }\n\n  ensureNumber(n: any): boolean {\n    return (typeof n === 'number' && !isNaN(n));\n  }\n\n  validateValue(value: string | number): number {\n    const newValue = Number(value);\n    if (!this.ensureNumber(newValue)) {\n      this.error = `[CountUp] invalid start or end value: ${value}`;\n      return null;\n    } else {\n      return newValue;\n    }\n  }\n\n  private resetDuration(): void {\n    this.startTime = null;\n    this.duration = Number(this.options.duration) * 1000;\n    this.remaining = this.duration;\n  }\n\n  // default format and easing functions\n\n  formatNumber = (num: number): string => {\n    const neg = (num < 0) ? '-' : '';\n    let result: string, x1: string, x2: string, x3: string;\n    result = Math.abs(num).toFixed(this.options.decimalPlaces);\n    result += '';\n    const x = result.split('.');\n    x1 = x[0];\n    x2 = x.length > 1 ? this.options.decimal + x[1] : '';\n    if (this.options.useGrouping) {\n      x3 = '';\n      let factor = 3, j = 0;\n      for (let i = 0, len = x1.length; i < len; ++i) {\n        if (this.options.useIndianSeparators && i === 4) {\n          factor = 2;\n          j = 1;\n        }\n        if (i !== 0 && (j % factor) === 0) {\n          x3 = this.options.separator + x3;\n        }\n        j++;\n        x3 = x1[len - i - 1] + x3;\n      }\n      x1 = x3;\n    }\n    // optional numeral substitution\n    if (this.options.numerals && this.options.numerals.length) {\n      x1 = x1.replace(/[0-9]/g, (w) => this.options.numerals[+w]);\n      x2 = x2.replace(/[0-9]/g, (w) => this.options.numerals[+w]);\n    }\n    return neg + this.options.prefix + x1 + x2 + this.options.suffix;\n  }\n\n  // t: current time, b: beginning value, c: change in value, d: duration\n  easeOutExpo = (t: number, b: number, c: number, d: number): number =>\n    c * (-Math.pow(2, -10 * t / d) + 1) * 1024 / 1023 + b;\n}\n      ")])])}],a=(i(57658),function(){return a=Object.assign||function(n){for(var t,i=1,e=arguments.length;i<e;i++)for(var s in t=arguments[i])Object.prototype.hasOwnProperty.call(t,s)&&(n[s]=t[s]);return n},a.apply(this,arguments)}),r=function(){function n(n,t,i){var e=this;this.endVal=t,this.options=i,this.version="2.6.2",this.defaults={startVal:0,decimalPlaces:0,duration:2,useEasing:!0,useGrouping:!0,useIndianSeparators:!1,smartEasingThreshold:999,smartEasingAmount:333,separator:",",decimal:".",prefix:"",suffix:"",enableScrollSpy:!1,scrollSpyDelay:200,scrollSpyOnce:!1},this.finalEndVal=null,this.useEasing=!0,this.countDown=!1,this.error="",this.startVal=0,this.paused=!0,this.once=!1,this.count=function(n){e.startTime||(e.startTime=n);var t=n-e.startTime;e.remaining=e.duration-t,e.useEasing?e.countDown?e.frameVal=e.startVal-e.easingFn(t,0,e.startVal-e.endVal,e.duration):e.frameVal=e.easingFn(t,e.startVal,e.endVal-e.startVal,e.duration):e.frameVal=e.startVal+(e.endVal-e.startVal)*(t/e.duration);var i=e.countDown?e.frameVal<e.endVal:e.frameVal>e.endVal;e.frameVal=i?e.endVal:e.frameVal,e.frameVal=Number(e.frameVal.toFixed(e.options.decimalPlaces)),e.printValue(e.frameVal),t<e.duration?e.rAF=requestAnimationFrame(e.count):null!==e.finalEndVal?e.update(e.finalEndVal):e.options.onCompleteCallback&&e.options.onCompleteCallback()},this.formatNumber=function(n){var t,i,s,a,r=n<0?"-":"";t=Math.abs(n).toFixed(e.options.decimalPlaces);var o=(t+="").split(".");if(i=o[0],s=o.length>1?e.options.decimal+o[1]:"",e.options.useGrouping){a="";for(var l=3,u=0,h=0,p=i.length;h<p;++h)e.options.useIndianSeparators&&4===h&&(l=2,u=1),0!==h&&u%l==0&&(a=e.options.separator+a),u++,a=i[p-h-1]+a;i=a}return e.options.numerals&&e.options.numerals.length&&(i=i.replace(/[0-9]/g,(function(n){return e.options.numerals[+n]})),s=s.replace(/[0-9]/g,(function(n){return e.options.numerals[+n]}))),r+e.options.prefix+i+s+e.options.suffix},this.easeOutExpo=function(n,t,i,e){return i*(1-Math.pow(2,-10*n/e))*1024/1023+t},this.options=a(a({},this.defaults),i),this.formattingFn=this.options.formattingFn?this.options.formattingFn:this.formatNumber,this.easingFn=this.options.easingFn?this.options.easingFn:this.easeOutExpo,this.startVal=this.validateValue(this.options.startVal),this.frameVal=this.startVal,this.endVal=this.validateValue(t),this.options.decimalPlaces=Math.max(this.options.decimalPlaces),this.resetDuration(),this.options.separator=String(this.options.separator),this.useEasing=this.options.useEasing,""===this.options.separator&&(this.options.useGrouping=!1),this.el="string"==typeof n?document.getElementById(n):n,this.el?this.printValue(this.startVal):this.error="[CountUp] target is null or undefined","undefined"!=typeof window&&this.options.enableScrollSpy&&(this.error?console.error(this.error,n):(window.onScrollFns=window.onScrollFns||[],window.onScrollFns.push((function(){return e.handleScroll(e)})),window.onscroll=function(){window.onScrollFns.forEach((function(n){return n()}))},this.handleScroll(this)))}return n.prototype.handleScroll=function(n){if(n&&window&&!n.once){var t=window.innerHeight+window.scrollY,i=n.el.getBoundingClientRect(),e=i.top+window.pageYOffset,s=i.top+i.height+window.pageYOffset;s<t&&s>window.scrollY&&n.paused?(n.paused=!1,setTimeout((function(){return n.start()}),n.options.scrollSpyDelay),n.options.scrollSpyOnce&&(n.once=!0)):(window.scrollY>s||e>t)&&!n.paused&&n.reset()}},n.prototype.determineDirectionAndSmartEasing=function(){var n=this.finalEndVal?this.finalEndVal:this.endVal;this.countDown=this.startVal>n;var t=n-this.startVal;if(Math.abs(t)>this.options.smartEasingThreshold&&this.options.useEasing){this.finalEndVal=n;var i=this.countDown?1:-1;this.endVal=n+i*this.options.smartEasingAmount,this.duration=this.duration/2}else this.endVal=n,this.finalEndVal=null;null!==this.finalEndVal?this.useEasing=!1:this.useEasing=this.options.useEasing},n.prototype.start=function(n){this.error||(n&&(this.options.onCompleteCallback=n),this.duration>0?(this.determineDirectionAndSmartEasing(),this.paused=!1,this.rAF=requestAnimationFrame(this.count)):this.printValue(this.endVal))},n.prototype.pauseResume=function(){this.paused?(this.startTime=null,this.duration=this.remaining,this.startVal=this.frameVal,this.determineDirectionAndSmartEasing(),this.rAF=requestAnimationFrame(this.count)):cancelAnimationFrame(this.rAF),this.paused=!this.paused},n.prototype.reset=function(){cancelAnimationFrame(this.rAF),this.paused=!0,this.resetDuration(),this.startVal=this.validateValue(this.options.startVal),this.frameVal=this.startVal,this.printValue(this.startVal)},n.prototype.update=function(n){cancelAnimationFrame(this.rAF),this.startTime=null,this.endVal=this.validateValue(n),this.endVal!==this.frameVal&&(this.startVal=this.frameVal,null==this.finalEndVal&&this.resetDuration(),this.finalEndVal=null,this.determineDirectionAndSmartEasing(),this.rAF=requestAnimationFrame(this.count))},n.prototype.printValue=function(n){var t;if(this.el){var i=this.formattingFn(n);(null===(t=this.options.plugin)||void 0===t?void 0:t.render)?this.options.plugin.render(this.el,i):"INPUT"===this.el.tagName?this.el.value=i:"text"===this.el.tagName||"tspan"===this.el.tagName?this.el.textContent=i:this.el.innerHTML=i}},n.prototype.ensureNumber=function(n){return"number"==typeof n&&!isNaN(n)},n.prototype.validateValue=function(n){var t=Number(n);return this.ensureNumber(t)?t:(this.error="[CountUp] invalid start or end value: ".concat(n),null)},n.prototype.resetDuration=function(){this.startTime=null,this.duration=1e3*Number(this.options.duration),this.remaining=this.duration},n}(),o={name:"count-up",data(){return{count:0,countUp:null}},mounted(){const n=this.$refs.target;this.countUp=new r(n,this.count)},methods:{clickStart(){this.countUp&&this.countUp.update(Math.round(1e6*Math.random()))}}},l=o,u=i(1001),h=(0,u.Z)(l,e,s,!1,null,"a8fe5f9c",null),p=h.exports}}]);
//# sourceMappingURL=822.8ef64c9e.js.map